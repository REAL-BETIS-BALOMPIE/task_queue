# Generated by Django 3.0.4 on 2020-03-24 09:55

from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='QueueTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('task_name', models.CharField(default='Queued Task', max_length=100, verbose_name='Task Name')),
                ('task_class', models.CharField(max_length=100, verbose_name='Task Class')),
                ('task_args', jsonfield.fields.JSONField(default=list, verbose_name='Task args')),
                ('task_kwargs', jsonfield.fields.JSONField(default=dict, verbose_name='Task kwargs')),
                ('process_status', models.CharField(choices=[('created', 'Created'), ('aborted', 'Aborted'), ('done', 'Done'), ('error', 'Error'), ('running', 'Running')], default='created', max_length=100)),
                ('priority', models.IntegerField(default=0, help_text='Lower is more priority', verbose_name='Priority')),
                ('async_result_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Async Result Id')),
                ('last_state', jsonfield.fields.JSONField(default=dict, verbose_name='JSON Last State')),
                ('last_traceback', models.TextField(default='', null=True, verbose_name='Last Traceback')),
                ('log', models.TextField(default='', verbose_name='Log')),
                ('last_activity_at', models.DateTimeField(null=True, verbose_name='Last Activity At')),
                ('started_running_at', models.DateTimeField(null=True, verbose_name='Started Running At')),
                ('finished_at', models.DateTimeField(null=True, verbose_name='Finished At')),
            ],
            options={
                'verbose_name': 'Queue task',
                'verbose_name_plural': 'Queue tasks',
                'ordering': ('priority', 'created'),
            },
        ),
        migrations.CreateModel(
            name='QueueTaskAtNextTasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(verbose_name='Position')),
            ],
            options={
                'verbose_name': 'Task at Queue Next Tasks',
                'verbose_name_plural': 'Tasks at Queue Next Tasks',
                'ordering': ('position', 'task'),
            },
        ),
        migrations.CreateModel(
            name='QueueTaskGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Queue Task Group',
                'verbose_name_plural': 'Queue Task Groups',
                'ordering': ('name', 'created'),
            },
        ),
        migrations.CreateModel(
            name='QueueTaskTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('task_name', models.CharField(default='Queued Task', max_length=100, verbose_name='Task Name')),
                ('task_class', models.CharField(max_length=100, verbose_name='Task Class')),
                ('task_args', jsonfield.fields.JSONField(default=list, verbose_name='Task args')),
                ('task_kwargs', jsonfield.fields.JSONField(default=dict, verbose_name='Task kwargs')),
            ],
            options={
                'verbose_name': 'Queue Task Template',
                'verbose_name_plural': 'Queue Task Template',
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='TaskQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('celery_queue', models.CharField(default='celery', help_text='Queue name for Celery Worker. celery is default queue', max_length=100, verbose_name='Celery Queue Name')),
                ('is_consuming_stopped', models.BooleanField(default=False, verbose_name='Stop consuming tasks')),
                ('aborted_tasks', models.ManyToManyField(blank=True, related_name='queues_as_aborted', to='task_queue.QueueTask', verbose_name='Aborted Tasks')),
                ('current_task', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='queue', to='task_queue.QueueTask', verbose_name='Current Task')),
                ('done_tasks', models.ManyToManyField(blank=True, related_name='queues_as_done', to='task_queue.QueueTask', verbose_name='Tasks Done')),
                ('failed_tasks', models.ManyToManyField(blank=True, related_name='queues_as_failed', to='task_queue.QueueTask', verbose_name='Failed Tasks')),
                ('next_tasks', models.ManyToManyField(blank=True, through='task_queue.QueueTaskAtNextTasks', to='task_queue.QueueTask', verbose_name='Next Tasks')),
                ('state_waiting_task', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waiting_state_save', to='task_queue.QueueTask', verbose_name='State Save Waiting Task')),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QueueTaskTemplateAtGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(verbose_name='Order')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.QueueTaskGroup', verbose_name='Queue Task Group')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.QueueTaskTemplate', verbose_name='Queue Task Template')),
            ],
            options={
                'verbose_name': 'Queue Task At Group',
                'verbose_name_plural': 'Queue Tasks At Group',
                'ordering': ('order', 'template'),
            },
        ),
        migrations.AddField(
            model_name='queuetaskgroup',
            name='group_tasks',
            field=models.ManyToManyField(blank=True, through='task_queue.QueueTaskTemplateAtGroup', to='task_queue.QueueTaskTemplate', verbose_name='Tasks'),
        ),
        migrations.AddField(
            model_name='queuetaskatnexttasks',
            name='queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.TaskQueue', verbose_name='Queue'),
        ),
        migrations.AddField(
            model_name='queuetaskatnexttasks',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.QueueTask', verbose_name='Task'),
        ),
    ]
