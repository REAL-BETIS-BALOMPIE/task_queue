# Generated by Django 5.0.3 on 2024-03-18 11:38

import django.db.models.deletion
import task_queue.json
import task_queue.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_celery_beat', '0018_improve_crontab_helptext'),
    ]

    operations = [
        migrations.CreateModel(
            name='QueueTaskGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('priority', models.IntegerField(blank=True, null=True, verbose_name='Tasks Priority')),
            ],
            options={
                'verbose_name': 'Queue Task Group',
                'verbose_name_plural': 'Queue Task Groups',
                'ordering': ('name', 'created'),
            },
        ),
        migrations.CreateModel(
            name='QueueTaskTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('task_name', models.CharField(default='Queued Task', max_length=255, verbose_name='Task Name')),
                ('task_class', models.CharField(max_length=100, verbose_name='Task Class')),
                ('task_args', models.JSONField(blank=True, decoder=task_queue.json.DateJSONDecoder, default=list, encoder=task_queue.json.JSONEncoder, verbose_name='Task args')),
                ('task_kwargs', models.JSONField(blank=True, decoder=task_queue.json.DateJSONDecoder, default=dict, encoder=task_queue.json.JSONEncoder, verbose_name='Task kwargs')),
            ],
            options={
                'verbose_name': 'Queue Task Template',
                'verbose_name_plural': 'Queue Task Template',
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='QueueTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('task_name', models.CharField(default='Queued Task', max_length=255, verbose_name='Task Name')),
                ('task_class', models.CharField(max_length=100, verbose_name='Task Class')),
                ('task_args', models.JSONField(blank=True, decoder=task_queue.json.DateJSONDecoder, default=list, encoder=task_queue.json.JSONEncoder, verbose_name='Task args')),
                ('task_kwargs', models.JSONField(blank=True, decoder=task_queue.json.DateJSONDecoder, default=dict, encoder=task_queue.json.JSONEncoder, verbose_name='Task kwargs')),
                ('process_status', models.CharField(choices=[('created', 'Created'), ('aborted', 'Aborted'), ('done', 'Done'), ('error', 'Error'), ('running', 'Running')], default='created', max_length=100)),
                ('priority', models.IntegerField(default=0, help_text='Lower is more priority', verbose_name='Priority')),
                ('async_result_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Async Result Id')),
                ('last_state', models.FileField(blank=True, null=True, upload_to=task_queue.models.queue_task_last_state_upload_to, verbose_name='Last State')),
                ('last_traceback', models.TextField(blank=True, default='', null=True, verbose_name='Last Traceback')),
                ('log', models.FileField(blank=True, null=True, upload_to=task_queue.models.queue_task_log_upload_to, verbose_name='Log')),
                ('last_activity_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Activity At')),
                ('started_running_at', models.DateTimeField(blank=True, null=True, verbose_name='Started Running At')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Finished At')),
                ('parent_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_tasks', to='task_queue.queuetask', verbose_name='Parent Task')),
            ],
            options={
                'verbose_name': 'Queue task',
                'verbose_name_plural': 'Queue tasks',
                'ordering': ('priority', 'created'),
            },
        ),
        migrations.CreateModel(
            name='QueueTaskAtNextTasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(verbose_name='Position')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.queuetask', verbose_name='Task')),
            ],
            options={
                'verbose_name': 'Task at Queue Next Tasks',
                'verbose_name_plural': 'Tasks at Queue Next Tasks',
                'ordering': ('position', 'task'),
            },
        ),
        migrations.CreateModel(
            name='QueueTaskGroupAtGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(verbose_name='Order')),
                ('children_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='as_children_group', to='task_queue.queuetaskgroup', verbose_name='Queue Task Group')),
                ('parent_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='task_queue.queuetaskgroup', verbose_name='Queue Task Group')),
            ],
            options={
                'verbose_name': 'Queue Task At Group',
                'verbose_name_plural': 'Queue Tasks At Group',
                'ordering': ('order', 'children_group'),
            },
        ),
        migrations.AddField(
            model_name='queuetaskgroup',
            name='group_groups',
            field=models.ManyToManyField(blank=True, through='task_queue.QueueTaskGroupAtGroup', to='task_queue.queuetaskgroup', verbose_name='Task Groups'),
        ),
        migrations.CreateModel(
            name='QueueTaskTemplateAtGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(verbose_name='Order')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.queuetaskgroup', verbose_name='Queue Task Group')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.queuetasktemplate', verbose_name='Queue Task Template')),
            ],
            options={
                'verbose_name': 'Queue Task At Group',
                'verbose_name_plural': 'Queue Tasks At Group',
                'ordering': ('order', 'template'),
            },
        ),
        migrations.AddField(
            model_name='queuetaskgroup',
            name='group_tasks',
            field=models.ManyToManyField(blank=True, through='task_queue.QueueTaskTemplateAtGroup', to='task_queue.queuetasktemplate', verbose_name='Tasks'),
        ),
        migrations.CreateModel(
            name='TaskQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('celery_queue', models.CharField(default='celery', help_text='Queue name for Celery Worker. celery is default queue', max_length=100, verbose_name='Celery Queue Name')),
                ('is_consuming_stopped', models.BooleanField(default=False, verbose_name='Stop consuming tasks')),
                ('aborted_tasks', models.ManyToManyField(blank=True, related_name='queues_as_aborted', to='task_queue.queuetask', verbose_name='Aborted Tasks')),
                ('current_task', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='queue', to='task_queue.queuetask', verbose_name='Current Task')),
                ('done_tasks', models.ManyToManyField(blank=True, related_name='queues_as_done', to='task_queue.queuetask', verbose_name='Tasks Done')),
                ('failed_tasks', models.ManyToManyField(blank=True, related_name='queues_as_failed', to='task_queue.queuetask', verbose_name='Failed Tasks')),
                ('next_tasks', models.ManyToManyField(blank=True, through='task_queue.QueueTaskAtNextTasks', to='task_queue.queuetask', verbose_name='Next Tasks')),
                ('state_waiting_task', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waiting_state_save', to='task_queue.queuetask', verbose_name='State Save Waiting Task')),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScheduledQueueTaskGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('priority', models.IntegerField(blank=True, null=True, verbose_name='Priority')),
                ('operation_type', models.CharField(choices=[('_op_append', 'Append to queue end'), ('_op_insert', 'Insert by priority'), ('_op_run', 'Run now'), ('_op_state', 'Run on next state save'), ('_op_next', 'Run after current task')], max_length=25, verbose_name='Operation Type')),
                ('disabled', models.BooleanField(default=False, help_text='If disabled, the task wont be executed', verbose_name='Disabled')),
                ('crontab_schedule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_celery_beat.crontabschedule', verbose_name='Crontab Schedule')),
                ('periodic_task', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_celery_beat.periodictask', verbose_name='Periodic Task')),
                ('task_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.queuetaskgroup', verbose_name='Queue Task Group')),
                ('queue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='task_queue.taskqueue', verbose_name='Queue')),
            ],
            options={
                'verbose_name': 'Scheduled Queue Task Group',
                'verbose_name_plural': 'Scheduled Queue Task Groups',
                'ordering': ('task_group',),
            },
        ),
        migrations.AddField(
            model_name='queuetaskatnexttasks',
            name='queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_queue.taskqueue', verbose_name='Queue'),
        ),
    ]
